/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.vistas;

import com.conexion.ConexionDB;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.mariadb.jdbc.Connection;

/**
 *
 * @author 57320
 */
public class VistaPrincipal extends javax.swing.JFrame {

	/**
	 * Creates new form VistaPrincipal
	 */
	public VistaPrincipal() {
            setLocationRelativeTo(this);
            setTitle("Productos");
            initComponents();
            actualizarTabla(null);
	}
        
        private void logicaBotonBuscar(){
            String campo = txt.getText();
            String where = null;
            if (!campo.equals("")) {
                where = "WHERE codigo = '"+campo+"'";
            }
            actualizarTabla(where);
        }
        
        private void logicaBotonCrear(){
            String sku = txt.getText();
            String nombre = txt.getText();
            String precio = txt.getText();
            String distribuidor = txt.getText();
            String categorias = txt.getText();
            
            if (!precio.esNumero()) {
                JOptionPane.showMessageDialog(null, "El precio debe ser escrito en d√≠gitos");
                return;
            }
            
            String sql = "INSERT INTO `estudiantes` (`nombre`, `edad`, `cedula`, `codigo`, `id`) VALUES ('Dejan Stankovic', '23', '76132', '12', NULL);";
        }
        
        private void actualizarTabla(String where) {
            try {
                DefaultTableModel modelo = new DefaultTableModel();
                tablaEstudiantes.setModel(modelo);

                PreparedStatement ps = null;
                ResultSet rs = null;
                ConexionDB conDb = new ConexionDB();
                Connection con = conDb.getConexion();

                String sql = "SELECT * FROM estudiantes";
                if (where != null) {
                    sql += " "+where;
                }
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();

                ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();
                int cantidadColumnas = rsMd.getColumnCount();

                modelo.addColumn("SKU:");
                modelo.addColumn("Nombre:");
                modelo.addColumn("Precio:");
                modelo.addColumn("Distribuidor:");
                modelo.addColumn("Categorias:");

                int[] anchos = {50, 50, 50, 50, 50};
                for (int i = 0; i < tablaEstudiantes.getColumnCount(); i++) {
                    tablaEstudiantes.getColumnModel().getColumn(i).setPreferredWidth(anchos[1]);
                }
                while (rs.next()) {
                    Object[] filas = new Object[cantidadColumnas];
                    for (int i = 0; i < cantidadColumnas; i++) {
                        filas[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(filas);
                }
            } catch (SQLException e) {
                System.err.println(e.toString());
            }
        }

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(VistaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(VistaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(VistaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(VistaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new VistaPrincipal().setVisible(true);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
}
